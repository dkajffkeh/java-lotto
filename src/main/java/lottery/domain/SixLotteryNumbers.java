package lottery.domain;

import static java.lang.Integer.parseInt;
import static java.lang.String.valueOf;
import static java.util.Arrays.stream;
import static java.util.Collections.unmodifiableSet;
import static java.util.stream.Collectors.toSet;
import static lottery.domain.constant.LotteryNumberRule.LOTTERY_NUMBERS_SIZE;

import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;
import lottery.domain.numbergenerator.RandomNumberGenerator;

public class SixLotteryNumbers {

    private static final String INVALID_NUMBERS_MSG = "로또 번호는 총 6개의 숫자로 구성되어야합니다.";

    private static final String SEPARATOR = ",";

    private static final String BLANK_REGEX = "\\s";

    private static final RandomNumberGenerator RANDOM_NUMBER_GENERATOR =
            new RandomNumberGenerator();

    private final Set<LotteryNumber> lotteryNumbers;

    public SixLotteryNumbers() {
        this(autoGeneratedSixNumbers());
    }

    public SixLotteryNumbers(int [] sixNumbers) {
        this(stream(sixNumbers)
                .mapToObj(LotteryNumber::new)
                .collect(Collectors.toSet()));
    }

    public SixLotteryNumbers(String numbersChunk) {
        this(toSixNumbers(numbersChunk));
    }

    public SixLotteryNumbers(Set<LotteryNumber> lotteryNumbers) {
        if(notHasSixNumbers(lotteryNumbers)) {
            throw new IllegalArgumentException(INVALID_NUMBERS_MSG);
        }
        this.lotteryNumbers = lotteryNumbers;
    }

    private static Set<LotteryNumber> toSixNumbers(String source) {
        return stream(separatedNumbers(source))
                .map(number -> new LotteryNumber(parseInt(number)))
                .collect(toSet());
    }

    private static String[] separatedNumbers(String source) {
        return removeBlank(source).split(SEPARATOR);
    }

    private static String removeBlank(String source) {
        return source.replaceAll(BLANK_REGEX, "");
    }

    private static Set<LotteryNumber> autoGeneratedSixNumbers() {
        Set<LotteryNumber> lotteryNumbers = new HashSet<>();
        while (lotteryNumbers.size() != LOTTERY_NUMBERS_SIZE.getRuleNumber()) {
            lotteryNumbers.add(new LotteryNumber(RANDOM_NUMBER_GENERATOR.generatedNumber()));
        }
        return lotteryNumbers;
    }

    private boolean notHasSixNumbers(Set<LotteryNumber> lotteryNumbers) {
        return lotteryNumbers.size() != LOTTERY_NUMBERS_SIZE.getRuleNumber();
    }

    public int size() {
        return lotteryNumbers.size();
    }

    public Set<LotteryNumber> getNumbers() {
        return unmodifiableSet(this.lotteryNumbers);
    }

    @Override
    public String toString() {
        return valueOf(lotteryNumbers);
    }
}
